# Artillery configuration for Socket.IO load testing of the chat backend.
# Validates connection stability, room joins, message delivery, and reconnection behaviour.
config:
  target: "${SOCKET_IO_TARGET:-http://localhost:3000}"
  plugins:
    expect: {}
    "metrics-by-endpoint": {}
  socketio:
    transports: ["websocket"]
    reconnection: true
    reconnectionDelay: 1000
    reconnectionDelayMax: 5000
    reconnectionAttempts: 5
  processor: ./socket-io-processor.mjs
  phases:
    # Warm-up: small trickle to establish baseline / caches
    - arrivalRate: 1
      duration: 60
      name: warm-up
    # Ramp: accelerate connection rate to stress join/message paths
    - arrivalRate: 5
      duration: 120
      name: ramp
    # Sustained: steady high load validating long-running stability
    - arrivalRate: 10
      duration: 300
      name: sustained
    # Cool-down: ensure graceful teardown and resource release
    - arrivalRate: 1
      duration: 60
      name: cool-down
  ensure:
    thresholds:
      - "socketio:connect{scenario:Basic Connection Scenario p95} < 1000"
      - "socketio:joinAck{scenario:Join and Send Scenario p95} < 500"
      - "socketio:messageDelivery{scenario:Join and Send Scenario p95} < 2000"
      - "reports.errors.count < 0.01 * reports.requests.count"
  outputs:
    - type: json
      destination: "results/artillery-socket-${ARTILLERY_TIMESTAMP}.json"
    - type: html
      destination: "results/artillery-socket-${ARTILLERY_TIMESTAMP}.html"

scenarios:
  - name: Basic Connection Scenario
    weight: 30
    engine: socketio
    flow:
      - emit:
          channel: "connect"
          data: {}
          expect:
            - "connected"
          timeout: 1
      - think: 2
      - emit:
          channel: "disconnect"
          data: {}

  - name: Join and Send Scenario
    weight: 50
    engine: socketio
    flow:
      - function: "assignConversation"
      - emit:
          channel: "connect"
          data: {}
          expect:
            - "connected"
          timeout: 1
      - emit:
          channel: "join"
          data:
            conversationId: "{{ conversationId }}"
          expect:
            - value:
                channel: "joined"
                json: {
                  "conversationId": "{{ conversationId }}"
                }
          timeout: 0.5
      - loop:
          count: 5
          flow:
            - function: "buildMessage"
            - emit:
                channel: "message:send"
                data:
                  conversationId: "{{ conversationId }}"
                  content: "{{ messageContent }}"
                expect:
                  - value:
                      channel: "message:receive"
                      json:
                        conversationId: "{{ conversationId }}"
                        content: "{{ messageContent }}"
                  - not: "error"
                timeout: 2
            - think: "{{ randomNumber(1,3) }}"
      - emit:
          channel: "disconnect"
          data: {}

  - name: Reconnection Scenario
    weight: 20
    engine: socketio
    flow:
      - function: "assignConversation"
      - emit:
          channel: "connect"
          data: {}
          expect:
            - "connected"
          timeout: 1
      - emit:
          channel: "join"
          data:
            conversationId: "{{ conversationId }}"
          expect:
            - value:
                channel: "joined"
                json:
                  conversationId: "{{ conversationId }}"
          timeout: 0.5
      - emit:
          channel: "disconnect"
          data: {}
      - think: 2
      - emit:
          channel: "connect"
          data: {}
          expect:
            - "connected"
          timeout: 1
      - emit:
          channel: "join"
          data:
            conversationId: "{{ conversationId }}"
          expect:
            - value:
                channel: "joined"
                json:
                  conversationId: "{{ conversationId }}"
          timeout: 0.5
      - function: "buildMessage"
      - emit:
          channel: "message:send"
          data:
            conversationId: "{{ conversationId }}"
            content: "{{ messageContent }}"
          expect:
            - value:
                channel: "message:receive"
                json:
                  conversationId: "{{ conversationId }}"
                  content: "{{ messageContent }}"
            - not: "error"
          timeout: 2
      - emit:
          channel: "disconnect"
          data: {}

# Usage:
# SOCKET_IO_TARGET=https://staging.example.com artillery run scripts/performance/load-tests/socket-io-load.yml
