openapi: 3.1.0
info:
  title: Chat Backend API
  version: 2.0.0
  description: >-
    Anonymous chat transport and persistence service. Identity-agnostic; upstream systems must authenticate clients.
servers:
  - url: http://localhost:3001
    description: Local development
paths:
  /api/v1/health:
    get:
      summary: Health check
      description: Returns service liveness and database connectivity status.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  uptime:
                    type: number
                  version:
                    type: string
        '500':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/chat/conversations:
    post:
      summary: Create conversation
      description: Create a DIRECT or GROUP conversation with participantIds.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
            examples:
              example:
                value:
                  userId: "user-123"
                  type: "DIRECT"
                  participantIds: ["user-456"]
      responses:
        '201':
          description: Conversation created
          headers:
            X-RateLimit-Limit:
              schema: { type: integer, example: 100 }
            X-RateLimit-Remaining:
              schema: { type: integer, example: 99 }
            X-RateLimit-Reset:
              schema: { type: integer, example: 1234567890 }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400': { $ref: '#/components/responses/BadRequest' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
    get:
      summary: List conversations
      parameters:
        - in: query
          name: userId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: cursor
          required: false
          schema: { type: string }
      responses:
        '200':
          description: List of conversations
          headers:
            X-RateLimit-Limit: { schema: { type: integer, example: 100 } }
            X-RateLimit-Remaining: { schema: { type: integer, example: 99 } }
            X-RateLimit-Reset: { schema: { type: integer, example: 1234567890 } }
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  nextCursor:
                    type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/v1/chat/conversations/{conversationId}/messages:
    post:
      summary: Send message
      description: Send a message to a conversation.
      parameters:
        - in: path
          name: conversationId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SendMessageRequest' }
            examples:
              example:
                value:
                  userId: "user-123"
                  content: "Hello"
      responses:
        '201':
          description: Message created
          headers:
            X-RateLimit-Limit: { schema: { type: integer, example: 100 } }
            X-RateLimit-Remaining: { schema: { type: integer, example: 99 } }
            X-RateLimit-Reset: { schema: { type: integer, example: 1234567890 } }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
    get:
      summary: Get conversation messages
      description: Retrieve messages for a conversation.
      parameters:
        - in: path
          name: conversationId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - in: query
          name: cursor
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Message list
          headers:
            X-RateLimit-Limit: { schema: { type: integer, example: 100 } }
            X-RateLimit-Remaining: { schema: { type: integer, example: 99 } }
            X-RateLimit-Reset: { schema: { type: integer, example: 1234567890 } }
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
                  nextCursor:
                    type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
      required: [error]
    CreateConversationRequest:
      type: object
      properties:
        userId: { type: string }
        type: { type: string, enum: [DIRECT, GROUP] }
        participantIds:
          type: array
          items: { type: string }
      required: [userId, type, participantIds]
    Conversation:
      type: object
      properties:
        id: { type: string }
        type: { type: string, enum: [DIRECT, GROUP] }
        participantIds:
          type: array
          items: { type: string }
        createdAt: { type: string, format: date-time }
    SendMessageRequest:
      type: object
      properties:
        userId: { type: string }
        content: { type: string, maxLength: 10000 }
      required: [userId, content]
    Message:
      type: object
      properties:
        id: { type: string }
        conversationId: { type: string }
        userId: { type: string }
        content: { type: string }
        createdAt: { type: string, format: date-time }
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFound:
      description: Not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    TooManyRequests:
      description: Rate limited
      headers:
        X-RateLimit-Limit: { schema: { type: integer, example: 100 } }
        X-RateLimit-Remaining: { schema: { type: integer, example: 0 } }
        X-RateLimit-Reset: { schema: { type: integer, example: 1234567890 } }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
