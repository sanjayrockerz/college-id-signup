// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Connection pool configuration for high concurrency
  // Supporting 120+ concurrent Virtual Users in load tests
  // Calculation: 120 VUs × 70% activity × 150ms avg query = ~13 concurrent queries peak
  // Buffer factor 3x for burst traffic = 40 connections minimum
  // Additional 10 for health checks, background jobs = 50 total
  // PostgreSQL max_connections = 100, safe usage = 70% = 70 connections available
  directUrl = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  username        String  @unique
  firstName       String?
  lastName        String?
  bio             String?
  profileImageUrl String?
  isActive        Boolean @default(true)

  // Social features
  anonymousPostsToday   Int       @default(0)
  weeklyPushesUsed      Int       @default(0)
  lastAnonymousPostDate DateTime?
  lastWeeklyReset       DateTime  @default(now())

  // Privacy settings
  allowDirectMessages Boolean        @default(true)
  showOnlineStatus    Boolean        @default(true)
  profileVisibility   VisibilityType @default(PUBLIC)

  // Chat presence
  isOnline   Boolean   @default(false)
  lastSeenAt DateTime?
  typingIn   String? // conversationId where user is currently typing

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relationships - Social
  posts               Post[]
  interactions        Interaction[]
  sentConnections     Connection[]     @relation("ConnectionRequester")
  receivedConnections Connection[]     @relation("ConnectionReceiver")
  coolnessRatings     CoolnessRating[]
  pushes              Push[]
  receivedPushes      Push[]           @relation("PushReceiver")

  // Relationships - Chat
  conversationUsers    ConversationUser[] @relation("ConversationMember")
  sentMessages         Message[]          @relation("MessageSender")
  messageReads         MessageRead[]      @relation("MessageReader")
  attachments          Attachment[]       @relation("AttachmentUploader")
  createdConversations Conversation[]     @relation("ConversationCreator")

  @@index([isOnline, lastSeenAt])
  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrls String[] @default([])

  // Post settings
  isAnonymous   Boolean        @default(false)
  visibility    VisibilityType @default(PUBLIC)
  allowComments Boolean        @default(true)
  allowSharing  Boolean        @default(true)

  // Metrics
  viewCount  Int @default(0)
  shareCount Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  authorId        String
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  interactions    Interaction[]
  coolnessRatings CoolnessRating[]
  pushes          Push[]
  postViews       PostView[]

  @@map("posts")
}

model Interaction {
  id        String          @id @default(cuid())
  type      InteractionType
  createdAt DateTime        @default(now())

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure one interaction per user per post per type
  @@unique([userId, postId, type])
  @@map("interactions")
}

model Connection {
  id            String           @id @default(cuid())
  status        ConnectionStatus @default(PENDING)
  isCloseFriend Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relationships
  requesterId String
  requester   User   @relation("ConnectionRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User   @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Ensure unique connections
  @@unique([requesterId, receiverId])
  @@map("connections")
}

model CoolnessRating {
  id        String   @id @default(cuid())
  rating    Int // 1-5 scale
  createdAt DateTime @default(now())

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure one rating per user per post
  @@unique([userId, postId])
  @@map("coolness_ratings")
}

model Push {
  id        String   @id @default(cuid())
  message   String?
  createdAt DateTime @default(now())

  // Relationships
  pusherId   String
  pusher     User   @relation(fields: [pusherId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User   @relation("PushReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  postId     String
  post       Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("pushes")
}

model PostView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure one view per user per post per hour (handled in application logic)
  @@unique([userId, postId])
  @@map("post_views")
}

// Enums
enum VisibilityType {
  PUBLIC
  CONNECTIONS_ONLY
  CLOSE_FRIENDS_ONLY
  PRIVATE
}

enum InteractionType {
  LIKE
  COMMENT
  SHARE
  VIEW
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REJECTED
}

enum ConversationType {
  DIRECT_MESSAGE
  GROUP_CHAT
  CHANNEL
}

enum ConversationRole {
  MEMBER
  ADMIN
  OWNER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  LOCATION
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

// === CHAT MODELS ===

model Conversation {
  id          String           @id @default(cuid())
  name        String? // null for direct messages
  description String?
  type        ConversationType @default(DIRECT_MESSAGE)
  avatarUrl   String?
  isActive    Boolean          @default(true)

  // Group chat settings
  allowMemberAdd   Boolean @default(true)
  allowFileSharing Boolean @default(true)
  maxMembers       Int?

  // Last activity tracking
  lastMessageAt DateTime?
  lastMessageId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  creatorId String
  creator   User   @relation("ConversationCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  conversationUsers ConversationUser[] @relation("ConversationMembers")
  messages          Message[]          @relation("ConversationMessages")

  @@index([updatedAt])
  @@index([type, isActive])
  @@index([creatorId])
  @@map("conversations")
}

model ConversationUser {
  id         String           @id @default(cuid())
  role       ConversationRole @default(MEMBER)
  isActive   Boolean          @default(true)
  isMuted    Boolean          @default(false)
  mutedUntil DateTime?

  // Join/leave tracking
  joinedAt          DateTime  @default(now())
  leftAt            DateTime?
  lastReadAt        DateTime?
  lastReadMessageId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId         String
  user           User         @relation("ConversationMember", fields: [userId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation("ConversationMembers", fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId, conversationId])
  @@index([conversationId, isActive])
  @@index([userId, isActive])
  @@map("conversation_users")
}

model Message {
  id        String        @id @default(cuid())
  content   String?
  type      MessageType   @default(TEXT)
  status    MessageStatus @default(SENT)
  isEdited  Boolean       @default(false)
  editedAt  DateTime?
  isDeleted Boolean       @default(false)
  deletedAt DateTime?

  // Thread/Reply support
  replyToId String?
  threadId  String? // root message ID for threaded conversations

  // Metadata
  metadata Json? // For storing additional message data (reactions, etc.)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  senderId       String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)

  replyTo Message?  @relation("MessageReply", fields: [replyToId], references: [id], onDelete: SetNull)
  replies Message[] @relation("MessageReply")

  attachments  Attachment[]  @relation("MessageAttachments")
  messageReads MessageRead[] @relation("MessageReadStatus")

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([threadId])
  @@index([replyToId])
  @@index([type, isDeleted])
  @@map("messages")
}

model MessageRead {
  id     String   @id @default(cuid())
  readAt DateTime @default(now())

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId    String
  user      User    @relation("MessageReader", fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message @relation("MessageReadStatus", fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@index([messageId])
  @@index([userId])
  @@map("message_reads")
}

model Attachment {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  type         AttachmentType

  // Image/Video specific
  width    Int?
  height   Int?
  duration Int? // for audio/video in seconds

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  uploaderId String
  uploader   User     @relation("AttachmentUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  messageId  String?
  message    Message? @relation("MessageAttachments", fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([uploaderId])
  @@index([type])
  @@map("attachments")
}
